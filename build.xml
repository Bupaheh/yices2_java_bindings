<project name="JYices" default="instructions" basedir=".">
  <description>
    yices java bindings
  </description>

  <!-- most build properties are in build.properties -->
  <property file="build.properties"/>
  <!-- except version property -->
  <property file="version.properties"/>
  <!--

       customization comes from the environment variables YICES_JNI and YICES_CLASSPATH
       YICES_JNI should be the path to where you want the library installed
       YICES_CLASSPATH should be where you want the classes installed.


  -->
  <property environment="env"/>
  <property name="pwd" value="${env.PWD}"/>


  <condition property="yices_jni" value="${env.YICES_JNI}" else="${pwd}${local_yices_jni}">
    <isset property="env.YICES_JNI" />
  </condition>

  <condition property="yices_classpath" value="${env.YICES_CLASSPATH}" else="${pwd}${local_yices_classpath}">
    <isset property="env.YICES_CLASSPATH" />
  </condition>


  <property name="yices_classpath" value="${env.YICES_CLASSPATH}"/>

  <target name="instructions"  description="Build instructions">
    <echo>
      YICES_JNI = ${yices_jni}
      YICES_CLASSPATH= ${yices_classpath}

      To build the yices jar (dist/lib/yices.jar):

      > ant dist

      To install the dynamic library libyices2java:

      > ant install

      To run the junit tests (located in junit):

      > ant test

      To run the examples (located in examples):

      > ant examples

      To clean up:

      > ant clean

    </echo>
  </target>



    <!-- set global properties for this build -->
    <property name="src" location="src/main/java"/>
    <property name="code" location="${src}/com/sri/yices"/>

    <property name="test" location="src/test/java/"/>
    <property name="test_code" location="${test}/com/sri/yices"/>

    <property name="build" location="build"/>
    <property name="classes" location="${build}/classes"/>
    <property name="test_classes" location="${build}/test_classes"/>
    <property name="dist" location="dist"/>

    <property name="junit" location="${test}"/>

    <property name="examples" location="examples"/>

    <property name="jnilib" value="${yices_jni}"/>


  <!-- determine the build environment -->


  <condition property="isWindows">
    <os family="windows" />
  </condition>

  <condition property="isUnix">
    <and>
      <os family="unix" />
      <not>  <os family="mac" /> </not>
    </and>
  </condition>

  <condition property="isDarwin">
    <os family="mac" />
  </condition>


  <target name="forUnix" if="isUnix">
    <property name="OS" value="linux"/>
    <property name="libraryext" value=".so"/>
  </target>

  <target name="forWindows" if="isWindows">
    <property name="OS" value="windows"/>
    <property name="libraryext" value=".dll"/>
  </target>

  <target name="forDarwin" if="isDarwin">
    <property name="OS" value="darwin"/>
    <property name="libraryext" value=".dylib"/>
  </target>


  <target name="sanity-check" depends="forUnix, forWindows, forDarwin">

    <property name="library" value="libyices2java${libraryext}"/>

    <property environment="env"/>


    <echo>
      Library extention:      ${libraryext}
      Operating system:       ${OS}
      JAVA_HOME:              ${JAVA_HOME}
      GLOBAL_LIB_DIR:         ${GLOBAL_LIB_DIR}
      CPPFLAGS:               ${CPPFLAGS}
      CXXFLAGS:               ${CXXFLAGS}
      CXX:                    ${CXX}
      LIBS:                   ${LIBS}
      Library:                ${library}
      JNI Library:            ${jnilib}
    </echo>



    <fail unless="env.JAVA_HOME" message="Please set JAVA_HOME: $$JAVA_HOME/include/jni.h needs to exist."/>

  </target>


  <target name="init">
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${classes}"/>
    <mkdir dir="${test_classes}"/>
  </target>

  <target name="compile" depends="sanity-check,init"
          description="compile the source and generate the headers with new 1.8 magic">

    <tstamp/>

    <echo message="Using version number: ${YICES_JAVA_BINDINGS_VERSION} and date: ${TODAY}"/>


    <!-- copy templates and update version numbers -->
    <copy overwrite="true" todir="${src}" >
      <filterset>
        <filter token="VERSION_STRING" value="${YICES_JAVA_BINDINGS_VERSION}"/>
        <filter token="BUILD_DATE" value="${TODAY}"/>
      </filterset>
      <fileset dir="${src}">
        <include name="**/*.template"/>
      </fileset>
      <mapper type="glob" from="*.template" to="*.java"/>
    </copy>


    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}"
	   destdir="${classes}"
	   debug="${DEBUG}"
       deprecation="${DEPRECATION}"
	   includeantruntime="false"
	   nativeheaderdir="${code}">
    </javac>
  </target>

  <target name="dist" depends="compile"
        description="generate the distribution">
    <!-- Create the distribution directory -->
    <mkdir dir="${dist}/lib"/>

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file
    <jar jarfile="${dist}/lib/yices.jar" basedir="${build}"/>
    -->

    <tstamp>
      <format property="TODAY" pattern="yyyy-MM-dd" />
    </tstamp>

    <jar compress="false"
         manifestencoding="UTF8"
         jarfile="${dist}/lib/yices.jar">

      <fileset dir="${classes}">
        <include name="**"/>
      </fileset>

      <!-- customize manifest -->
      <manifest>
        <attribute name="Main-Class" value="com.sri.yices.Version"/>
        <section name="yices">
          <attribute name="Specification-Title" value="Yices Java Bindings"/>
          <attribute name="Specification-Version" value="1.0"/>
          <attribute name="Specification-Vendor" value="SRI International"/>
          <attribute name="Implementation-Title" value="jyices"/>
          <attribute name="Implementation-Version" value="${TODAY}"/>
          <attribute name="Implementation-Vendor" value="SRI International"/>
	  <attribute name="Built-By" value="${user.name}"/>
        </section>
      </manifest>
    </jar>

    <exec executable="make"
          dir="${code}"
          failifexecutionfails="true">
      <arg line="install"/>
    </exec>

  </target>

  <target name="install" description="install the jni library">

    <exec executable="make"
          dir="${code}"
          failifexecutionfails="true">
      <arg line="install"/>
    </exec>

  </target>

  <target name="clean"
        description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
    <delete>
      <fileset dir="${examples}" includes="*.class"/>
    </delete>

    <exec executable="make"
          dir="${code}"
          failifexecutionfails="true">
      <arg line="clean"/>
    </exec>
  </target>


  <path id="classpath.test">
    <pathelement location="${dist}/lib/yices.jar"/>
    <pathelement location="lib/junit-4.12.jar"/>
    <pathelement location="lib/hamcrest-core-1.3.jar"/>
  </path>

  <target name="test-compile">
    <javac srcdir="${junit}" destdir="${test_classes}" includeantruntime="false">
        <classpath refid="classpath.test"/>
    </javac>
  </target>

  <!--

  <target name="test" depends="dist,test-compile">
    <echo> Running tests </echo>
    <echo> test_classes:  ${test_classes} </echo>
    <junit printsummary="on" haltonfailure="yes" fork="true">
      <sysproperty key="java.library.path" path="${jnilib}"/>
      <classpath>
          <path refid="classpath.test"/>
          <pathelement location="${test_classes}"/>
      </classpath>
      <formatter type="brief" usefile="false" />
      <batchtest>
        <fileset dir="${test_code}" includes="Test*.java" />
      </batchtest>
    </junit>
  </target>

TestBigRationals.java
TestConstructor.java
TestContext.java
TestStatus.java
TestTypes.java
TestYices.java

    -->

  <target name="test" depends="dist,test-compile,install">
    <echo> Running tests </echo>
    <echo> test_classes:  ${test_classes} </echo>
    <echo> java.library.path:  ${java.library.path} </echo>
    <junit printsummary="on" haltonfailure="yes" fork="true">
      <sysproperty key="java.library.path" path="${jnilib}"/>
      <classpath>
        <path refid="classpath.test"/>
        <pathelement location="${test_classes}"/>
      </classpath>
      <formatter type="brief" usefile="false" />
      <test name="com.sri.yices.TestBigRationals"/>
      <test name="com.sri.yices.TestConstructor"/>
      <test name="com.sri.yices.TestContext"/>
      <test name="com.sri.yices.TestStatus"/>
      <test name="com.sri.yices.TestTypes"/>
      <test name="com.sri.yices.TestYices"/>
    </junit>
  </target>

  <path id="classpath.examples">
    <pathelement location="${dist}/lib/yices.jar"/>
    <pathelement location="examples"/>
  </path>


  <target name="examples" depends="dist">

    <javac srcdir="${examples}"
	   destdir="${examples}"
	   classpathref="classpath.examples"
	   debug="${DEBUG}"
           deprecation="${DEPRECATION}"
	   includeantruntime="false">
    </javac>


    <antcall target="example"> <param name = "class" value="LoadYices"/>  </antcall>

    <antcall target="example"> <param name = "class" value="MCSat"/>  </antcall>

    <antcall target="example"> <param name = "class" value="CEx2"/>  </antcall>

  </target>

  <target name="example" depends="dist">

    <!-- run the ${class} -->
    <echo> Running ${class} </echo>

    <java classname="${class}"
	  dir="${examples}"
	  fork="true"
	  classpathref="classpath.examples">
      <jvmarg value="-Djava.library.path=${jnilib}"/>
    </java>


  </target>


</project>
